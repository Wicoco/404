import { SitemapFetcher } from '../lib/SitemapFetcher.js';
import { SitemapCleaner } from '../lib/SitemapCleaner.js';
import { LinkChecker } from '../lib/LinkChecker.js';
import { SlackNotifier } from '../lib/SlackNotifier.js';

/**
 * API Endpoint principal pour la v√©rification des liens
 * Endpoint: /api/check-links
 * M√©thodes: GET, POST
 */
export default async function handler(request, response) {
  // Headers CORS pour tests depuis navigateur
  response.setHeader('Access-Control-Allow-Origin', '*');
  response.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  response.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (request.method === 'OPTIONS') {
    response.status(200).end();
    return;
  }

  console.log('üöÄ D√©but v√©rification liens Stereolabs.com');
  console.log('üìä M√©thode:', request.method);
  console.log('üìä Query params:', request.query);

  try {
    // Configuration
    const sitemapUrl = request.query.sitemap || process.env.SITEMAP_URL || 'https://www.stereolabs.com/sitemap.xml';
    const notifySlack = request.query.notify !== 'true'; // Par d√©faut true
    const maxPages = request.query.maxPages ? parseInt(request.query.maxPages) : null; // Limite pour tests
    
    console.log('üì° Sitemap configur√©:', sitemapUrl);
    console.log('üì± Notifications Slack:', notifySlack ? 'activ√©es' : 'd√©sactiv√©es');

    // √âtape 1: R√©cup√©ration du sitemap
    console.log('üì° √âtape 1/4: R√©cup√©ration sitemap...');
    const fetcher = new SitemapFetcher();
    const rawUrls = await fetcher.fetchSitemap(sitemapUrl);
    
    if (rawUrls.length === 0) {
      throw new Error('Aucune URL trouv√©e dans le sitemap');
    }

    // √âtape 2: √âpuration du sitemap
    console.log('üßπ √âtape 2/4: √âpuration sitemap...');
    const cleaner = new SitemapCleaner();
    const cleanUrls = cleaner.process(rawUrls);
    const cleaningReport = cleaner.generateReport(rawUrls, cleanUrls);
    
    console.log('üìä Rapport √©puration:', cleaningReport);

    // Limitation pour tests
    const urlsToScan = maxPages ? cleanUrls.slice(0, maxPages) : cleanUrls;
    
    if (maxPages) {
      console.log(`üß™ Mode test: scan limit√© √† ${maxPages} pages`);
    }

    // √âtape 3: Scan des liens
    console.log('üîç √âtape 3/4: Scan des liens...');
    const checker = new LinkChecker();
    const scanResults = await checker.scanWebsite(urlsToScan);

    // Extraction des erreurs 404 uniquement
    const errors404 = scanResults.summary.errors404;
    
    // √âtape 4: Notification Slack si erreurs 404
    let notificationSent = false;
    if (notifySlack && errors404.length > 0) {
      console.log('üì± √âtape 4/4: Envoi notification Slack...');
      const notifier = new SlackNotifier();
      notificationSent = await notifier.notifyErrors404(errors404, scanResults.stats);
    } else if (errors404.length === 0) {
      console.log('‚úÖ √âtape 4/4: Aucune erreur 404 - pas de notification');
    } else {
      console.log('‚è≠Ô∏è √âtape 4/4: Notifications d√©sactiv√©es');
    }

    // R√©ponse finale
    const finalResults = {
      success: true,
      timestamp: new Date().toISOString(),
      scan: {
        sitemapUrl,
        originalUrls: rawUrls.length,
        cleanedUrls: cleanUrls.length,
        scannedUrls: urlsToScan.length,
        cleaningReport
      },
      results: {
        duration: scanResults.duration,
        totalLinksChecked: scanResults.summary.totalLinks,
        errors404Count: errors404.length,
        errors404,
        stats: scanResults.stats
      },
      notification: {
        enabled: notifySlack,
        sent: notificationSent,
        errors404Count: errors404.length
      }
    };

    // R√©ponse diff√©renci√©e selon pr√©sence erreurs
    if (errors404.length > 0) {
      console.log(`üö® SCAN TERMIN√â: ${errors404.length} erreurs 404 d√©tect√©es`);
      response.status(200).json(finalResults);
    } else {
      console.log('‚úÖ SCAN TERMIN√â: Aucune erreur 404, site sain!');
      response.status(200).json(finalResults);
    }

  } catch (error) {
    console.error('‚ùå Erreur critique lors du scan:', error);
    
    // Notification d'erreur technique vers Slack
    if (process.env.SLACK_WEBHOOK_URL) {
      try {
        const notifier = new SlackNotifier();
        await notifier.notifyTechnicalError(error, request);
      } catch (slackError) {
        console.error('‚ùå Erreur notification Slack √©galement:', slackError.message);
      }
    }
    
    response.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}
